{{#packageName}}
package {{packageName}};
{{/packageName}}

import io.vertx.core.Future;
import io.vertx.core.Vertx;
import io.vertx.core.net.SocketAddress;
import io.vertx.grpc.client.GrpcClient;

public class {{className}} implements Vertx{{serviceName}}GrpcApi {
    private final GrpcClient client;
    private final SocketAddress socketAddress;

    public {{className}}(Vertx vertx, SocketAddress socketAddress) {
        this.client = GrpcClient.client(vertx);
        this.socketAddress = socketAddress;
    }

{{#unaryUnaryMethods}}
    @Override
    public Future<{{outputType}}> {{methodName}}({{inputType}} request) {
        return client.request(socketAddress, {{serviceName}}Grpc.{{methodNameGetter}}()).compose(req -> {
            req.end(request);
            return req.response().compose(resp -> resp.last());
        });
    }

{{/unaryUnaryMethods}}
{{#manyUnaryMethods}}
    @Override
    public Future<{{outputType}}> {{methodName}}(java.util.Iterator<{{inputType}}> requests) {
        return client.request(socketAddress, {{serviceName}}Grpc.{{methodNameGetter}}()).compose(req -> {
            while (requests.hasNext()) {
                req.write(requests.next());
            }
            return req.response().compose(resp -> resp.last());
        });
    }

{{/manyUnaryMethods}}
}