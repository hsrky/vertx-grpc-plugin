{{#packageName}}
package {{packageName}};
{{/packageName}}

import com.lwlee2608.vertx.grpc.plugin.GrpcStreamClientRequest;
import com.lwlee2608.vertx.grpc.plugin.GrpcStreamClientResponse;
import io.vertx.core.Future;
import io.vertx.core.Vertx;
import io.vertx.core.net.SocketAddress;
import io.vertx.grpc.client.GrpcClient;
import io.vertx.grpc.client.GrpcClientRequest;

import java.util.function.Consumer;

public class {{className}} {
    private final GrpcClient client;
    private final SocketAddress socketAddress;

    public {{className}}(Vertx vertx, SocketAddress socketAddress) {
        this.client = GrpcClient.client(vertx);
        this.socketAddress = socketAddress;
    }

{{#unaryMethods}}
    public Future<{{outputType}}> {{methodName}}({{inputType}} request) {
        return client.request(socketAddress, {{serviceName}}Grpc.{{methodNameGetter}}()).compose(req -> {
            req.end(request);
            return req.response().compose(resp -> resp.last());
        });
    }

{{/unaryMethods}}
{{#unaryManyMethods}}
    public Future<GrpcStreamClientResponse<{{outputType}}>> {{methodName}}({{inputType}} request) {
        return client.request(socketAddress, {{serviceName}}Grpc.{{methodNameGetter}}()).compose(req -> {
            req.end(request);
            return req.response().map(resp -> new GrpcStreamClientResponse<>(resp));
        });
    }

{{/unaryManyMethods}}
{{#manyUnaryMethods}}
    public Future<{{outputType}}> {{methodName}}(Consumer<GrpcStreamClientRequest<{{inputType}}>> request) {
        return client.request(socketAddress, {{serviceName}}Grpc.{{methodNameGetter}}()).compose(req -> {
            request.accept(new GrpcStreamClientRequest(req));
            return req.response().compose(resp -> resp.last());
        });
    }

{{/manyUnaryMethods}}
{{#manyManyMethods}}
    public Future<GrpcStreamClientResponse<{{outputType}}>> {{methodName}}(Consumer<GrpcStreamClientRequest<{{inputType}}>> request) {
        return client.request(socketAddress, {{serviceName}}Grpc.{{methodNameGetter}}()).compose(req -> {
            request.accept(new GrpcStreamClientRequest(req));
            return req.response().map(resp -> new GrpcStreamClientResponse<>(resp));
        });
    }

{{/manyManyMethods}}
}