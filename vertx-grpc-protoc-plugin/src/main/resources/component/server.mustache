{{#packageName}}
package {{packageName}};
{{/packageName}}

import io.reactivex.Observable;
import io.reactivex.Single;
import io.vertx.core.impl.logging.Logger;
import io.vertx.core.impl.logging.LoggerFactory;
import io.vertx.core.Handler;
import io.vertx.reactivex.core.Vertx;
import io.vertx.reactivex.core.http.HttpServerRequest;
import io.vertx.reactivex.grpc.server.GrpcServer;
{{#imports}}
import {{.}};
{{/imports}}

public class {{className}}  {
    private static final Logger logger = LoggerFactory.getLogger({{className}}.class);
    private final GrpcServer server;

    public {{className}}(Vertx vertx) {
        this.server = GrpcServer.server(vertx);
    }

{{#service}}
    public interface {{serviceName}}Api {
{{#unaryMethods}}
        Single<{{outputType}}> {{methodName}}({{inputType}} request);
{{/unaryMethods}}
{{#unaryManyMethods}}
        Observable<{{outputType}}> {{methodName}}({{inputType}} request);
{{/unaryManyMethods}}
{{#manyUnaryMethods}}
        Single<{{outputType}}> {{methodName}}(Observable<{{inputType}}> request);
{{/manyUnaryMethods}}
{{#manyManyMethods}}
        Observable<{{outputType}}> {{methodName}}(Observable<{{inputType}}> request);
{{/manyManyMethods}}
    }

    public {{className}} callHandlers({{serviceName}}Api implementation) {
{{#unaryMethods}}
        logger.debug("Register handlers for {{serviceName}}");
        server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
            logger.debug("Received {{methodNameGetter}} request.");
            request.handler(req -> {
                logger.debug("Handling req for {{methodNameGetter}} with req: " + req);
                var r = {{inputType}}.fromProto(req);
                logger.debug("Object: " + r);
                implementation.{{methodName}}(r)
                    .doOnSuccess(resp -> request.response().end({{outputType}}.toProto(resp)))
                    .doOnError(throwable -> logger.warn("Error while handling {{methodNameGetter}}", throwable))
                    .subscribe();
            });
        });
{{/unaryMethods}}
{{#unaryManyMethods}}
        server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
            request.handler(req -> implementation.{{methodName}}({{inputType}}.fromProto(req))
                    .doOnNext(msg -> request.response().write({{outputType}}.toProto(msg)))
                    .doOnComplete(() -> request.response().end())
                    .subscribe());
        });
{{/unaryManyMethods}}
{{#manyUnaryMethods}}
        server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
            implementation.{{methodName}}(Observable.create(emitter -> {
                        request.handler(req -> emitter.onNext({{inputType}}.fromProto(req)));
                        request.endHandler($ -> emitter.onComplete());
                    }))
                    .doOnSuccess(resp -> request.response().end({{outputType}}.toProto(resp)))
                    .subscribe();
        });
{{/manyUnaryMethods}}
{{#manyManyMethods}}
        server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
            implementation.{{methodName}}(Observable.create(emitter -> {
                        request.handler(req -> emitter.onNext({{inputType}}.fromProto(req)));
                        request.endHandler($ -> emitter.onComplete());
                    }))
                    .doOnNext(msg -> request.response().write({{outputType}}.toProto(msg)))
                    .doOnComplete(() -> request.response().end())
                    .subscribe();
        });
{{/manyManyMethods}}
        return this;
    }

    public Handler<HttpServerRequest> getGrpcServer() {
        return server;
    }
{{/service}}
}